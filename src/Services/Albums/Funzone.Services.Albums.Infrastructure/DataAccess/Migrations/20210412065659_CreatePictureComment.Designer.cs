// <auto-generated />
using System;
using Funzone.Services.Albums.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Funzone.Services.Albums.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(AlbumsContext))]
    [Migration("20210412065659_CreatePictureComment")]
    partial class CreatePictureComment
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Funzone.Services.Albums.Domain.Albums.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Albums", "Albums");
                });

            modelBuilder.Entity("Funzone.Services.Albums.Domain.PictureComments.PictureComment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("varchar(1024)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PictureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PictureId");

                    b.ToTable("PictureComments", "Albums");
                });

            modelBuilder.Entity("Funzone.Services.Albums.Domain.Pictures.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<string>("ThumbnailLink")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Pictures", "Albums");
                });

            modelBuilder.Entity("Funzone.Services.Albums.Domain.Albums.Album", b =>
                {
                    b.OwnsOne("Funzone.Services.Albums.Domain.SharedKernel.Visibility", "Visibility", b1 =>
                        {
                            b1.Property<Guid>("AlbumId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("varchar(20)")
                                .HasColumnName("Visibility");

                            b1.HasKey("AlbumId");

                            b1.ToTable("Albums");

                            b1.WithOwner()
                                .HasForeignKey("AlbumId");
                        });

                    b.Navigation("Visibility");
                });

            modelBuilder.Entity("Funzone.Services.Albums.Domain.PictureComments.PictureComment", b =>
                {
                    b.HasOne("Funzone.Services.Albums.Domain.Pictures.Picture", null)
                        .WithMany("PictureComments")
                        .HasForeignKey("PictureId");
                });

            modelBuilder.Entity("Funzone.Services.Albums.Domain.Pictures.Picture", b =>
                {
                    b.HasOne("Funzone.Services.Albums.Domain.Albums.Album", null)
                        .WithMany("Pictures")
                        .HasForeignKey("AlbumId");
                });

            modelBuilder.Entity("Funzone.Services.Albums.Domain.Albums.Album", b =>
                {
                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("Funzone.Services.Albums.Domain.Pictures.Picture", b =>
                {
                    b.Navigation("PictureComments");
                });
#pragma warning restore 612, 618
        }
    }
}
