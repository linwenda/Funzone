// <auto-generated />
using System;
using Funzone.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Funzone.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(FunzoneDbContext))]
    [Migration("20210418023758_CreateZone")]
    partial class CreateZone
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Funzone.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NickName")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Funzone.Domain.ZoneMembers.ZoneMember", b =>
                {
                    b.Property<Guid>("ZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("JoinedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ZoneId", "UserId");

                    b.ToTable("ZoneMembers");
                });

            modelBuilder.Entity("Funzone.Domain.Zones.Zone", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("Funzone.Domain.Users.User", b =>
                {
                    b.OwnsOne("Funzone.Domain.Users.EmailAddress", "EmailAddress", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("varchar(255)")
                                .HasColumnName("EmailAddress");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("EmailAddress");
                });

            modelBuilder.Entity("Funzone.Domain.ZoneMembers.ZoneMember", b =>
                {
                    b.HasOne("Funzone.Domain.Zones.Zone", null)
                        .WithMany("ZoneMembers")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Funzone.Domain.ZoneMembers.ZoneRole", "Role", b1 =>
                        {
                            b1.Property<Guid>("ZoneMemberZoneId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("ZoneMemberUserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("role");

                            b1.HasKey("ZoneMemberZoneId", "ZoneMemberUserId");

                            b1.ToTable("ZoneMembers");

                            b1.WithOwner()
                                .HasForeignKey("ZoneMemberZoneId", "ZoneMemberUserId");
                        });

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Funzone.Domain.Zones.Zone", b =>
                {
                    b.Navigation("ZoneMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
