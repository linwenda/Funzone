// <auto-generated />
using System;
using Funzone.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Funzone.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(FunzoneDbContext))]
    partial class FunzoneDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Funzone.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NickName")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Funzone.Domain.ZoneRules.ZoneRule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("ZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ZoneRules");
                });

            modelBuilder.Entity("Funzone.Domain.ZoneUsers.ZoneUser", b =>
                {
                    b.Property<Guid>("ZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsLeave")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ZoneId", "UserId");

                    b.ToTable("ZoneUsers");
                });

            modelBuilder.Entity("Funzone.Domain.Zones.Zone", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("Funzone.Domain.Users.User", b =>
                {
                    b.OwnsOne("Funzone.Domain.Users.EmailAddress", "EmailAddress", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("varchar(255)")
                                .HasColumnName("EmailAddress");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("EmailAddress");
                });

            modelBuilder.Entity("Funzone.Domain.ZoneUsers.ZoneUser", b =>
                {
                    b.OwnsOne("Funzone.Domain.ZoneUsers.ZoneUserRole", "Role", b1 =>
                        {
                            b1.Property<Guid>("ZoneUserZoneId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("ZoneUserUserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("varchar(20)")
                                .HasColumnName("Role");

                            b1.HasKey("ZoneUserZoneId", "ZoneUserUserId");

                            b1.ToTable("ZoneUsers");

                            b1.WithOwner()
                                .HasForeignKey("ZoneUserZoneId", "ZoneUserUserId");
                        });

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Funzone.Domain.Zones.Zone", b =>
                {
                    b.OwnsOne("Funzone.Domain.Zones.ZoneStatus", "Status", b1 =>
                        {
                            b1.Property<Guid>("ZoneId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("varchar(20)")
                                .HasColumnName("Status");

                            b1.HasKey("ZoneId");

                            b1.ToTable("Zones");

                            b1.WithOwner()
                                .HasForeignKey("ZoneId");
                        });

                    b.Navigation("Status");
                });
#pragma warning restore 612, 618
        }
    }
}
